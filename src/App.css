
import React, { useEffect, useMemo, useRef, useState } from "react";
import { Plus, Image as ImageIcon, Star, Trash2, Search, Filter, SortAsc, Upload, Download, Beer, RefreshCw, LogIn, LogOut } from "lucide-react";
import { createClient } from "@supabase/supabase-js";

// Supabase ops√¶tning ‚Äì SKIFT til dine egne v√¶rdier:
const SUPABASE_URL = "https://DITPROJECT.supabase.co";   // <-- s√¶t din URL
const SUPABASE_ANON_KEY = "DIN_ANON_KEY";               // <-- s√¶t din key
const CLUB_ID = "floeng-olklub"; // teknisk id ‚Äì men UI viser "Fl√∏ng √òlklub"

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

function uuid() { return crypto.randomUUID(); }

const defaultBeer = () => ({
  id: uuid(),
  createdAt: Date.now(),
  name: "",
  brewery: "",
  style: "",
  color: "",
  price: "",
  rating: 0,
  notes: "",
  photoDataUrl: "",
});

export default function BeerClubApp() {
  const [user, setUser] = useState(null);
  const [beers, setBeers] = useState([]);
  const [draft, setDraft] = useState(defaultBeer());
  const [query, setQuery] = useState("");
  const [sortBy, setSortBy] = useState("created_at");
  const [sortDir, setSortDir] = useState("desc");
  const [styleFilter, setStyleFilter] = useState("alle");
  const [ratingFilter, setRatingFilter] = useState(0);
  const fileRef = useRef(null);

  // Auth
  useEffect(() => {
    supabase.auth.getSession().then(({ data }) => setUser(data.session?.user ?? null));
    const { data: sub } = supabase.auth.onAuthStateChange((_event, session) => setUser(session?.user ?? null));
    return () => sub?.subscription.unsubscribe();
  }, []);

  async function signIn(email) {
    const { error } = await supabase.auth.signInWithOtp({ email, options: { emailRedirectTo: window.location.href } });
    if (error) alert(error.message); else alert("Tjek din mail for login-link ‚úâÔ∏è");
  }
  async function signOut(){ await supabase.auth.signOut(); }

  // Load beers
  async function loadBeers(){
    const { data, error } = await supabase
      .from("beers")
      .select("*")
      .eq("club_id", CLUB_ID)
      .order(sortBy, { ascending: sortDir === "asc" });
    if (error) { console.error(error); return; }
    setBeers(data || []);
  }
  useEffect(()=>{ if (user) loadBeers(); }, [user, sortBy, sortDir]);

  // Tilf√∏j √∏l
  async function addBeer(){
    if (!draft.name.trim()) return alert("Giv √∏llen et navn f√∏rst ‚úçÔ∏è");
    if (!user) return alert("Log ind f√∏rst");

    let photo_path = null;
    if (draft.photoDataUrl) {
      const file = dataURLtoFile(draft.photoDataUrl, `${uuid()}.jpg`);
      const path = `${CLUB_ID}/${user.id}/${file.name}`;
      const { error: upErr } = await supabase.storage.from("photos").upload(path, file, { upsert: true, contentType: "image/jpeg" });
      if (upErr) { alert("Fejl ved upload: "+upErr.message); return; }
      photo_path = path;
    }

    const { error } = await supabase.from("beers").insert({
      club_id: CLUB_ID,
      user_id: user.id,
      name: draft.name,
      brewery: draft.brewery || null,
      style: draft.style || null,
      color: draft.color || null,
      price: draft.price || null,
      rating: draft.rating || 0,
      notes: draft.notes || null,
      photo_path,
    });
    if (error) { alert(error.message); return; }
    setDraft(defaultBeer());
    if (fileRef.current) fileRef.current.value = "";
    loadBeers();
  }

  const onPhotoChange = async (e) => {
    const file = e.target.files?.[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = () => setDraft(d => ({ ...d, photoDataUrl: reader.result }));
    reader.readAsDataURL(file);
  };

  return (
    <div style={{ padding: "1rem" }}>
      <h1>Fl√∏ng √òlklub üçª</h1>

      {!user ? (
        <div>
          <input type="email" placeholder="din@mail.dk" onBlur={(e)=>signIn(e.target.value)} />
          <p>(indtast din mail og tjek din indbakke for login-link)</p>
        </div>
      ) : (
        <button onClick={signOut}>Log ud</button>
      )}

      <h2>Tilf√∏j en √∏l</h2>
      <input value={draft.name} onChange={e=>setDraft({...draft, name:e.target.value})} placeholder="Navn" />
      <input value={draft.brewery} onChange={e=>setDraft({...draft, brewery:e.target.value})} placeholder="Bryggeri" />
      <input value={draft.style} onChange={e=>setDraft({...draft, style:e.target.value})} placeholder="Stil" />
      <input value={draft.price} onChange={e=>setDraft({...draft, price:e.target.value})} placeholder="Pris" />
      <input type="file" ref={fileRef} onChange={onPhotoChange} />
      <button onClick={addBeer}>Tilf√∏j √òl</button>

      <h2>√òllene</h2>
      <ul>
        {beers.map(b => (
          <li key={b.id}>{b.name} ‚Äì {b.brewery} ‚Äì {b.rating}‚≠ê</li>
        ))}
      </ul>
    </div>
  );
}

// Hj√¶lpefunktion
function dataURLtoFile(dataUrl, filename){
  const arr = dataUrl.split(','), mime = arr[0].match(/:(.*?);/)[1];
  const bstr = atob(arr[1]); let n = bstr.length; const u8arr = new Uint8Array(n);
  while(n--){ u8arr[n] = bstr.charCodeAt(n); }
  return new File([u8arr], filename, { type: mime });
}
